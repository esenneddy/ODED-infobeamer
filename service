#!/usr/bin/python2.7
import os
import time
import traceback
import urllib2
import sys
import pytz
from datetime import datetime, timedelta
from calendar import timegm

from hosted import CONFIG, NODE
import importer

CONFIG.restart_on_update()

def current_time():
   now = datetime.utcnow()
   timestamp = timegm(now.timetuple()) + now.microsecond / 1000000.
   return now, timestamp

def send_clock(now, ts):
  now = now.replace(tzinfo=pytz.utc)
  now = now.astimezone(pytz.timezone(CONFIG['timezone']))
  now = now.replace(tzinfo=None)
  since_midnight = (
    now -
    now.replace(hour=0, minute=0, second=0, microsecond=0)
  )
  since_midnight = since_midnight.seconds + since_midnight.microseconds / 1000000.
  
  monday = (now - timedelta(days = now.weekday())).replace(hour=0, minute=0, second=0, microseconds=0)
  since_monday = now - monday
  since_monday = since_monday.days * 86400 + since_monday.seconds + since_monday.microseconds / 1000000.
  
  NODE.send('/clock/unix:%f' % ts)
  NODE.send('/clock/midnight:%f' % since_midnight)
  NODE.send('/clock/since_monday:%f' % since_monday)
  NODE.send('/clock/human:%s' % now.strftime(CONFIG['time_fmt']))

def get_schedule(url):
  try:
    resp = urllib2.urlopen(url)
    schedule = resp.read()
    with file("Termine.json.new", "wb") as f:
      f.write(schedule)
    os.rename("Termine.json.new", "Termine.json"), 
  except Exception, err:
    traceback.print_exec()
    return False
  return True

def main():
  while 1:
    now, ts = current_time()
    if now.year < 2000:
      print >>sys.stderr, "too soon"
      time.sleep(1)
      continue
      
    get_schedule(CONFIG['schedule_url'])
      
    send_clock(now, ts)
    time.sleep(0.5)

if __name__ == "__main__":
  main()
